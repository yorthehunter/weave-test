@import '../../core/index.scss';

// Utilities are classes that help lay out a UI properly. They should be used
// as classes or extended as you see fit.
// Utility classes get a pass on using !important, but please be aware that they
// will likely override existing properties.

@mixin weave-utilities {
  // Block elements (like <div>) are full width by default. Be sure you're not
  // overriding anything important when using this.
  %full-width,
  .full-width {
    width: 100% !important;
    max-width: 100% !important;
  }

  // Forces full-width on an element for xs viewports. Useful when you simply
  // want a block of content for mobile viewports.
  @include viewport-equal-to-and-smaller-than(xs) {
    %full-width--xs,
    .full-width--xs {
      width: 100%;
      margin-left: 0 !important;
      margin-right: 0 !important;
    }
  }

  @each $size in ['xxl', 'xl', 'lg', 'md', 'sm', 'xs', 'none'] {
    %p--#{$size},
    .p--#{$size} {
      --padding: var(--spacing-#{$size});
      padding: var(--padding);
    }

    %px--#{$size},
    .px--#{$size} {
      --px: var(--spacing-#{$size});
      padding-left: var(--px);
      padding-right: var(--px);
    }

    %py--#{$size},
    .py--#{$size} {
      --py: var(--spacing-#{$size});
      padding-top: var(--py);
      padding-bottom: var(--py);
    }

    %pt--#{$size},
    .pt--#{$size} {
      --pt: var(--spacing-#{$size});
      padding-top: var(--pt);
    }

    %pb--#{$size},
    .pb--#{$size} {
      --pb: var(--spacing-#{$size});
      padding-bottom: var(--pb);
    }

    %pl--#{$size},
    .pl--#{$size} {
      --pl: var(--spacing-#{$size});
      padding-left: var(--pl);
    }

    %pr--#{$size},
    .pr--#{$size} {
      --pr: var(--spacing-#{$size});
      padding-right: var(--pr);
    }

    %mx--#{$size},
    .mx--#{$size} {
      --mx: var(--spacing-#{$size});
      margin-left: var(--mx);
      margin-right: var(--mx);
    }

    %my--#{$size},
    .my--#{$size} {
      --my: var(--spacing-#{$size});
      margin-top: var(--my);
      margin-bottom: var(--my);
    }

    %mt--#{$size},
    .mt--#{$size} {
      --mt: var(--spacing-#{$size});
      margin-top: var(--mt);
    }

    %mb--#{$size},
    .mb--#{$size} {
      --mb: var(--spacing-#{$size});
      margin-bottom: var(--mb);
    }

    %ml--#{$size},
    .ml--#{$size} {
      --ml: var(--spacing-#{$size});
      margin-left: var(--ml);
    }

    %mr--#{$size},
    .mr--#{$size} {
      --mr: var(--spacing-#{$size});
      margin-right: var(--mr);
    }
  }

  // Strips a list of its styles
  %list-unstyled,
  .list-unstyled {
    @extend %pl--none;
    list-style: none;
  }

  // Use this to hide an element but allow it to still be readable in the DOM
  // e.g. for screenreaders
  %hidden-from-sight,
  .hidden-from-sight {
    position: absolute !important;
    left: -200vw;
  }

  %separator,
  .separator {
    --border-color: #{$color-gray-light};
    @include border;
    // When inside a flex box, stretch to fit height
    align-self: stretch;
  }

  %separator--dark,
  .separator--dark {
    --border-color: #{$color-gray-dark};
  }

  %separator--vertical,
  .separator--vertical {
    --ml: var(--spacing-sm);
    --mr: var(--spacing-sm);
    --border-width: 0px 1px 0px 0px;
    width: 0px;
    @include margin;
  }

  %separator--horizontal,
  .separator--horizontal {
    --mt: var(--spacing-sm);
    --mb: calc(var(--spacing-sm) - 1px);
    --border-width: 1px 0px 0px 0px;
    height: 0px;
    @include margin;
  }

  %text-center,
  .text-center {
    text-align: center;
  }

  %text-strike,
  .text-strike {
    text-decoration: line-through;
  }

  %text-secondary,
  .text-secondary {
    color: var(--text-secondary-color);
    font-style: italic;
  }

}

@if $weave-utilities--option == true {
  @include weave-utilities;
}
